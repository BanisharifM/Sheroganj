{"ast":null,"code":"import React from \"react\";\nimport { timeToSimpleDate } from \"./timeDiffCalc\";\n\nfunction getMilliseconds(time) {\n  if (time instanceof Date) {\n    const now = new Date();\n    return Math.floor((time.getTime() - now.getTime()) / 1000);\n  }\n\n  const {\n    days,\n    hours,\n    minutes,\n    seconds\n  } = time;\n  return (days || 0) * 24 * 60 * 60 + (hours || 0) * 60 * 60 + (minutes || 0) * 60 + (seconds || 0);\n}\n\nexport default function useTimer(endTime) {\n  const timer = React.useRef();\n  const initialRemaining = React.useRef(getMilliseconds(endTime));\n  const [remainingSeconds, setRemainingSeconds] = React.useState(getMilliseconds(endTime));\n  React.useEffect(() => {\n    if (initialRemaining.current === getMilliseconds(endTime)) {\n      return;\n    }\n\n    initialRemaining.current = getMilliseconds(endTime);\n  }, [endTime]);\n  const [finished, setFinished] = React.useState(false);\n  const tick = React.useCallback(() => {\n    setRemainingSeconds(prevState => {\n      if (prevState === 0) {\n        setFinished(true);\n        return 0;\n      }\n\n      return prevState - 1;\n    });\n  }, []);\n  const start = React.useCallback(() => {\n    if (endTime instanceof Date) {\n      const restartTime = getMilliseconds(endTime);\n\n      if (restartTime < 0) {\n        return;\n      }\n\n      setRemainingSeconds(restartTime);\n    }\n\n    if (!timer.current) {\n      timer.current = setInterval(() => tick(), 1000);\n    }\n  }, [endTime, tick]);\n  const reset = React.useCallback(() => {\n    if (endTime instanceof Date) {\n      return;\n    }\n\n    setRemainingSeconds(initialRemaining.current);\n  }, [endTime]);\n  const pause = React.useCallback(() => {\n    if (timer.current) {\n      clearInterval(timer.current);\n      timer.current = undefined;\n    }\n  }, []);\n  const stop = React.useCallback(() => {\n    pause();\n    setRemainingSeconds(0);\n  }, [pause]);\n  React.useEffect(() => {\n    if (finished) {\n      stop();\n    }\n  }, [finished, stop]);\n  return {\n    /**\n     * The remaining amount of count down timer.\n     */\n    remainingTime: timeToSimpleDate(remainingSeconds),\n\n    /**\n     * Stops the timer counting and resets the remaining timer to zero.\n     */\n    stop,\n\n    /**\n     * Starts the timer (or resumes it if paused already).\n     */\n    start,\n\n    /**\n     * A boolean showing if counting reached to zero by counting.\n     */\n    finished,\n\n    /**\n     * Resets the remaining values to their initial values, if the timer is used with constant count down amount (and\n     * no end date). Otherwise does nothing.\n     */\n    reset,\n\n    /**\n     * Stops timer from counting, but not reset the values of counting.\n     */\n    pause\n  };\n}","map":{"version":3,"sources":["/home/null/Desktop/Gitlab Projects/sheroganj/utils/useTimer.ts"],"names":["React","timeToSimpleDate","getMilliseconds","time","Date","now","Math","floor","getTime","days","hours","minutes","seconds","useTimer","endTime","timer","useRef","initialRemaining","remainingSeconds","setRemainingSeconds","useState","useEffect","current","finished","setFinished","tick","useCallback","prevState","start","restartTime","setInterval","reset","pause","clearInterval","undefined","stop","remainingTime"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {timeToSimpleDate} from \"./timeDiffCalc\";\n\nexport type SimpleDateTime = {\n  days?: number;\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n};\n\nfunction getMilliseconds(time: Date | SimpleDateTime) {\n  if (time instanceof Date) {\n    const now = new Date();\n    return Math.floor((time.getTime() - now.getTime()) / 1000);\n  }\n  const {days, hours, minutes, seconds} = time;\n  return (days || 0) * 24 * 60 * 60 + (hours || 0) * 60 * 60 + (minutes || 0) * 60 + (seconds || 0);\n}\n\nexport default function useTimer(endTime: Date | SimpleDateTime) {\n  const timer = React.useRef<NodeJS.Timeout | undefined>();\n  const initialRemaining = React.useRef(getMilliseconds(endTime));\n  const [remainingSeconds, setRemainingSeconds] = React.useState(getMilliseconds(endTime));\n  React.useEffect(() => {\n    if (initialRemaining.current === getMilliseconds(endTime)) {\n      return;\n    }\n    initialRemaining.current = getMilliseconds(endTime);\n  }, [endTime]);\n  const [finished, setFinished] = React.useState(false);\n\n  const tick = React.useCallback(() => {\n    setRemainingSeconds((prevState) => {\n      if (prevState === 0) {\n        setFinished(true);\n        return 0;\n      }\n      return prevState - 1;\n    });\n  }, []);\n\n  const start = React.useCallback(() => {\n    if (endTime instanceof Date) {\n      const restartTime = getMilliseconds(endTime);\n      if (restartTime < 0) {\n        return;\n      }\n      setRemainingSeconds(restartTime);\n    }\n    if (!timer.current) {\n      timer.current = setInterval(() => tick(), 1000);\n    }\n  }, [endTime, tick]);\n\n  const reset = React.useCallback(() => {\n    if (endTime instanceof Date) {\n      return;\n    }\n    setRemainingSeconds(initialRemaining.current);\n  }, [endTime]);\n\n  const pause = React.useCallback(() => {\n    if (timer.current) {\n      clearInterval(timer.current);\n      timer.current = undefined;\n    }\n  }, []);\n\n  const stop = React.useCallback(() => {\n    pause();\n    setRemainingSeconds(0);\n  }, [pause]);\n\n  React.useEffect(() => {\n    if (finished) {\n      stop();\n    }\n  }, [finished, stop]);\n\n  return {\n    /**\n     * The remaining amount of count down timer.\n     */\n    remainingTime: timeToSimpleDate(remainingSeconds),\n    /**\n     * Stops the timer counting and resets the remaining timer to zero.\n     */\n    stop,\n    /**\n     * Starts the timer (or resumes it if paused already).\n     */\n    start,\n    /**\n     * A boolean showing if counting reached to zero by counting.\n     */\n    finished,\n    /**\n     * Resets the remaining values to their initial values, if the timer is used with constant count down amount (and\n     * no end date). Otherwise does nothing.\n     */\n    reset,\n    /**\n     * Stops timer from counting, but not reset the values of counting.\n     */\n    pause,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}