{"ast":null,"code":"import myProxy from \"./index\";\nexport var imagesProxy = function imagesProxy(imagesBasePath, allImages, imagesInnerPaths) {\n  return new myProxy(allImages, {\n    get: function get(target, p, r) {\n      if (p in target) {\n        var image = target[p];\n        var innerPath = imagesInnerPaths[p];\n        var baseAddress;\n\n        if (innerPath !== \"\") {\n          baseAddress = \"\".concat(imagesBasePath).concat(innerPath, \"/\");\n        } else {\n          baseAddress = \"\".concat(imagesBasePath).concat(innerPath);\n        }\n\n        return new myProxy(image, {\n          get: function get(innerTarget, prop, receiver) {\n            if (prop in innerTarget) {\n              var imageName = innerTarget[prop];\n              return \"\".concat(baseAddress).concat(imageName);\n            }\n\n            return Reflect.get(innerTarget, prop, receiver);\n          }\n        });\n      }\n\n      return Reflect.get(target, p, r);\n    }\n  });\n};","map":{"version":3,"sources":["/home/null/Desktop/University/8th/مباحث ویژه/Project/Frontend/sheroganj/utils/proxies/imagesProxy.ts"],"names":["myProxy","imagesProxy","imagesBasePath","allImages","imagesInnerPaths","get","target","p","r","image","innerPath","baseAddress","innerTarget","prop","receiver","imageName","Reflect"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CACzBC,cADyB,EAEzBC,SAFyB,EAGzBC,gBAHyB;AAAA,SAKzB,IAAIJ,OAAJ,CAAYG,SAAZ,EAAuB;AACrBE,IAAAA,GADqB,eACjBC,MADiB,EACTC,CADS,EACNC,CADM,EACH;AAChB,UAAID,CAAC,IAAID,MAAT,EAAiB;AACf,YAAMG,KAAK,GAAGH,MAAM,CAACC,CAAD,CAApB;AACA,YAAMG,SAAS,GAAGN,gBAAgB,CAACG,CAAD,CAAlC;AACA,YAAII,WAAJ;;AACA,YAAID,SAAS,KAAK,EAAlB,EAAsB;AACpBC,UAAAA,WAAW,aAAMT,cAAN,SAAuBQ,SAAvB,MAAX;AACD,SAFD,MAEO;AACLC,UAAAA,WAAW,aAAMT,cAAN,SAAuBQ,SAAvB,CAAX;AACD;;AACD,eAAO,IAAIV,OAAJ,CAAYS,KAAZ,EAAmB;AACxBJ,UAAAA,GADwB,eACpBO,WADoB,EACPC,IADO,EACDC,QADC,EACS;AAC/B,gBAAID,IAAI,IAAID,WAAZ,EAAyB;AACvB,kBAAMG,SAAS,GAAGH,WAAW,CAACC,IAAD,CAA7B;AACA,+BAAUF,WAAV,SAAwBI,SAAxB;AACD;;AACD,mBAAOC,OAAO,CAACX,GAAR,CAAYO,WAAZ,EAAyBC,IAAzB,EAA+BC,QAA/B,CAAP;AACD;AAPuB,SAAnB,CAAP;AASD;;AACD,aAAOE,OAAO,CAACX,GAAR,CAAYC,MAAZ,EAAoBC,CAApB,EAAuBC,CAAvB,CAAP;AACD;AAtBoB,GAAvB,CALyB;AAAA,CAApB","sourcesContent":["import myProxy from \"./index\";\n\nexport const imagesProxy = <T extends Record<string, Record<string, string>>>(\n  imagesBasePath: string,\n  allImages: T,\n  imagesInnerPaths: {[k in keyof typeof allImages]: string}\n) =>\n  new myProxy(allImages, {\n    get(target, p, r) {\n      if (p in target) {\n        const image = target[p];\n        const innerPath = imagesInnerPaths[p];\n        let baseAddress: string;\n        if (innerPath !== \"\") {\n          baseAddress = `${imagesBasePath}${innerPath}/`;\n        } else {\n          baseAddress = `${imagesBasePath}${innerPath}`;\n        }\n        return new myProxy(image, {\n          get(innerTarget, prop, receiver) {\n            if (prop in innerTarget) {\n              const imageName = innerTarget[prop];\n              return `${baseAddress}${imageName}`;\n            }\n            return Reflect.get(innerTarget, prop, receiver);\n          },\n        });\n      }\n      return Reflect.get(target, p, r);\n    },\n  }) as T;\n"]},"metadata":{},"sourceType":"module"}