{"ast":null,"code":"import myProxy from \"./index\";\nexport const imagesProxy = (imagesBasePath, allImages, imagesInnerPaths) => new myProxy(allImages, {\n  get(target, p, r) {\n    if (p in target) {\n      const image = target[p];\n      const innerPath = imagesInnerPaths[p];\n      let baseAddress;\n\n      if (innerPath !== \"\") {\n        baseAddress = `${imagesBasePath}${innerPath}/`;\n      } else {\n        baseAddress = `${imagesBasePath}${innerPath}`;\n      }\n\n      return new myProxy(image, {\n        get(innerTarget, prop, receiver) {\n          if (prop in innerTarget) {\n            const imageName = innerTarget[prop];\n            return `${baseAddress}${imageName}`;\n          }\n\n          return Reflect.get(innerTarget, prop, receiver);\n        }\n\n      });\n    }\n\n    return Reflect.get(target, p, r);\n  }\n\n});","map":{"version":3,"sources":["/home/null/Desktop/Gitlab Projects/sheroganj/utils/proxies/imagesProxy.ts"],"names":["myProxy","imagesProxy","imagesBasePath","allImages","imagesInnerPaths","get","target","p","r","image","innerPath","baseAddress","innerTarget","prop","receiver","imageName","Reflect"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,CACzBC,cADyB,EAEzBC,SAFyB,EAGzBC,gBAHyB,KAKzB,IAAIJ,OAAJ,CAAYG,SAAZ,EAAuB;AACrBE,EAAAA,GAAG,CAACC,MAAD,EAASC,CAAT,EAAYC,CAAZ,EAAe;AAChB,QAAID,CAAC,IAAID,MAAT,EAAiB;AACf,YAAMG,KAAK,GAAGH,MAAM,CAACC,CAAD,CAApB;AACA,YAAMG,SAAS,GAAGN,gBAAgB,CAACG,CAAD,CAAlC;AACA,UAAII,WAAJ;;AACA,UAAID,SAAS,KAAK,EAAlB,EAAsB;AACpBC,QAAAA,WAAW,GAAI,GAAET,cAAe,GAAEQ,SAAU,GAA5C;AACD,OAFD,MAEO;AACLC,QAAAA,WAAW,GAAI,GAAET,cAAe,GAAEQ,SAAU,EAA5C;AACD;;AACD,aAAO,IAAIV,OAAJ,CAAYS,KAAZ,EAAmB;AACxBJ,QAAAA,GAAG,CAACO,WAAD,EAAcC,IAAd,EAAoBC,QAApB,EAA8B;AAC/B,cAAID,IAAI,IAAID,WAAZ,EAAyB;AACvB,kBAAMG,SAAS,GAAGH,WAAW,CAACC,IAAD,CAA7B;AACA,mBAAQ,GAAEF,WAAY,GAAEI,SAAU,EAAlC;AACD;;AACD,iBAAOC,OAAO,CAACX,GAAR,CAAYO,WAAZ,EAAyBC,IAAzB,EAA+BC,QAA/B,CAAP;AACD;;AAPuB,OAAnB,CAAP;AASD;;AACD,WAAOE,OAAO,CAACX,GAAR,CAAYC,MAAZ,EAAoBC,CAApB,EAAuBC,CAAvB,CAAP;AACD;;AAtBoB,CAAvB,CALK","sourcesContent":["import myProxy from \"./index\";\n\nexport const imagesProxy = <T extends Record<string, Record<string, string>>>(\n  imagesBasePath: string,\n  allImages: T,\n  imagesInnerPaths: {[k in keyof typeof allImages]: string}\n) =>\n  new myProxy(allImages, {\n    get(target, p, r) {\n      if (p in target) {\n        const image = target[p];\n        const innerPath = imagesInnerPaths[p];\n        let baseAddress: string;\n        if (innerPath !== \"\") {\n          baseAddress = `${imagesBasePath}${innerPath}/`;\n        } else {\n          baseAddress = `${imagesBasePath}${innerPath}`;\n        }\n        return new myProxy(image, {\n          get(innerTarget, prop, receiver) {\n            if (prop in innerTarget) {\n              const imageName = innerTarget[prop];\n              return `${baseAddress}${imageName}`;\n            }\n            return Reflect.get(innerTarget, prop, receiver);\n          },\n        });\n      }\n      return Reflect.get(target, p, r);\n    },\n  }) as T;\n"]},"metadata":{},"sourceType":"module"}