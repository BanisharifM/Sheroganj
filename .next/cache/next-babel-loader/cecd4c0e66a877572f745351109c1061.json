{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nexport default function useScrollTo(target) {\n  _s();\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return React.useCallback(function () {\n    if (target === null) {\n      return;\n    }\n\n    var current = target instanceof HTMLElement ? target : target.current;\n    var _options$scrollBehavi = options.scrollBehavior,\n        scrollBehavior = _options$scrollBehavi === void 0 ? \"auto\" : _options$scrollBehavi;\n    var scrollTarget;\n\n    if (current) {\n      scrollTarget = current.offsetTop;\n      window.scroll({\n        top: scrollTarget,\n        behavior: scrollBehavior\n      });\n    }\n  }, [options, target]);\n}\n\n_s(useScrollTo, \"epj4qY15NHsef74wNqHIp5fdZmg=\");","map":{"version":3,"sources":["/home/null/Desktop/Gitlab Projects/sheroganj/utils/useScrollTo.ts"],"names":["React","useScrollTo","target","options","useCallback","current","HTMLElement","scrollBehavior","scrollTarget","offsetTop","window","scroll","top","behavior"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAMA,eAAe,SAASC,WAAT,CACbC,MADa,EAGb;AAAA;;AAAA,MADAC,OACA,uEADyB,EACzB;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkB,YAAM;AAC7B,QAAIF,MAAM,KAAK,IAAf,EAAqB;AACnB;AACD;;AACD,QAAMG,OAAO,GAAGH,MAAM,YAAYI,WAAlB,GAAgCJ,MAAhC,GAAyCA,MAAM,CAACG,OAAhE;AAJ6B,gCAKKF,OALL,CAKtBI,cALsB;AAAA,QAKtBA,cALsB,sCAKL,MALK;AAM7B,QAAIC,YAAJ;;AACA,QAAIH,OAAJ,EAAa;AACXG,MAAAA,YAAY,GAAGH,OAAO,CAACI,SAAvB;AACAC,MAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,QAAAA,GAAG,EAAEJ,YAAN;AAAoBK,QAAAA,QAAQ,EAAEN;AAA9B,OAAd;AACD;AACF,GAXM,EAWJ,CAACJ,OAAD,EAAUD,MAAV,CAXI,CAAP;AAYD;;GAhBuBD,W","sourcesContent":["import React from \"react\";\n\ntype ScrollOptions = {\n  scrollBehavior?: ScrollBehavior;\n};\n\nexport default function useScrollTo<T extends HTMLElement | null>(\n  target: React.RefObject<T> | T,\n  options: ScrollOptions = {}\n) {\n  return React.useCallback(() => {\n    if (target === null) {\n      return;\n    }\n    const current = target instanceof HTMLElement ? target : target.current;\n    const {scrollBehavior = \"auto\"} = options;\n    let scrollTarget: number;\n    if (current) {\n      scrollTarget = current.offsetTop;\n      window.scroll({top: scrollTarget, behavior: scrollBehavior});\n    }\n  }, [options, target]);\n}\n"]},"metadata":{},"sourceType":"module"}